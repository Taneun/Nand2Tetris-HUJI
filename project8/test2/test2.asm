//  init
@256
D=A
@SP
M=D
//  call Sys.init 0 args
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret.0)
//  function Math.init 1 vars
(Math.init)
//  initializes 1 variables to 0
@SP
A=M
M=0
@SP
M=M+1
// C_PUSH constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//  call Array.new 1 args
@Array.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret.1)
// C_POP static 1
@SP
AM=M-1
D=M
@Math.1
M=D
// C_PUSH constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//  call Array.new 1 args
@Array.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret.2)
// C_POP static 0
@SP
AM=M-1
D=M
@Math.0
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label WHILE_EXP0
(Math.init$WHILE_EXP0)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_1
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_1
D;JLT
@R13
D=D-M
@CHECK_LT_1
0;JMP
(Y_NEG_LT_1)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_1
D;JGT
@R13
D=D-M
@CHECK_LT_1
0;JMP
(Y_POS_X_NEG_LT_1)
D=-1
@CHECK_LT_1
0;JMP
(Y_NEG_X_POS_LT_1)
D=1
@CHECK_LT_1
0;JMP
(CHECK_LT_1)
@TRUE_LT_1
D;JLT
D=0
@CONTINUE_LT_1
0;JMP
(TRUE_LT_1)
D=-1
(CONTINUE_LT_1)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.init$WHILE_END0
D;JNE
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto WHILE_EXP0
@Math.init$WHILE_EXP0
0;JMP
//  label WHILE_END0
(Math.init$WHILE_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Math.abs 0 vars
(Math.abs)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_2
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_2
D;JLT
@R13
D=D-M
@CHECK_LT_2
0;JMP
(Y_NEG_LT_2)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_2
D;JGT
@R13
D=D-M
@CHECK_LT_2
0;JMP
(Y_POS_X_NEG_LT_2)
D=-1
@CHECK_LT_2
0;JMP
(Y_NEG_X_POS_LT_2)
D=1
@CHECK_LT_2
0;JMP
(CHECK_LT_2)
@TRUE_LT_2
D;JLT
D=0
@CONTINUE_LT_2
0;JMP
(TRUE_LT_2)
D=-1
(CONTINUE_LT_2)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.abs$IF_TRUE0
D;JNE
//  goto IF_FALSE0
@Math.abs$IF_FALSE0
0;JMP
//  label IF_TRUE0
(Math.abs$IF_TRUE0)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE0
(Math.abs$IF_FALSE0)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Math.multiply 5 vars
(Math.multiply)
//  initializes 5 variables to 0
@SP
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_3
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_3
D;JLT
@R13
D=D-M
@CHECK_LT_3
0;JMP
(Y_NEG_LT_3)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_3
D;JGT
@R13
D=D-M
@CHECK_LT_3
0;JMP
(Y_POS_X_NEG_LT_3)
D=-1
@CHECK_LT_3
0;JMP
(Y_NEG_X_POS_LT_3)
D=1
@CHECK_LT_3
0;JMP
(CHECK_LT_3)
@TRUE_LT_3
D;JLT
D=0
@CONTINUE_LT_3
0;JMP
(TRUE_LT_3)
D=-1
(CONTINUE_LT_3)
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_4
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_4
D;JLT
@R13
D=D-M
@CHECK_GT_4
0;JMP
(Y_NEG_GT_4)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_4
D;JGT
@R13
D=D-M
@CHECK_GT_4
0;JMP
(Y_POS_X_NEG_GT_4)
D=-1
@CHECK_GT_4
0;JMP
(Y_NEG_X_POS_GT_4)
D=1
@CHECK_GT_4
0;JMP
(CHECK_GT_4)
@TRUE_GT_4
D;JGT
D=0
@CONTINUE_GT_4
0;JMP
(TRUE_GT_4)
D=-1
(CONTINUE_GT_4)
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_5
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_5
D;JLT
@R13
D=D-M
@CHECK_GT_5
0;JMP
(Y_NEG_GT_5)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_5
D;JGT
@R13
D=D-M
@CHECK_GT_5
0;JMP
(Y_POS_X_NEG_GT_5)
D=-1
@CHECK_GT_5
0;JMP
(Y_NEG_X_POS_GT_5)
D=1
@CHECK_GT_5
0;JMP
(CHECK_GT_5)
@TRUE_GT_5
D;JGT
D=0
@CONTINUE_GT_5
0;JMP
(TRUE_GT_5)
D=-1
(CONTINUE_GT_5)
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_6
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_6
D;JLT
@R13
D=D-M
@CHECK_LT_6
0;JMP
(Y_NEG_LT_6)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_6
D;JGT
@R13
D=D-M
@CHECK_LT_6
0;JMP
(Y_POS_X_NEG_LT_6)
D=-1
@CHECK_LT_6
0;JMP
(Y_NEG_X_POS_LT_6)
D=1
@CHECK_LT_6
0;JMP
(CHECK_LT_6)
@TRUE_LT_6
D;JLT
D=0
@CONTINUE_LT_6
0;JMP
(TRUE_LT_6)
D=-1
(CONTINUE_LT_6)
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// or
@SP
AM=M-1
D=M
A=A-1
M=D|M
// C_POP local 4
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  call Math.abs 1 args
@Math.abs$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.3)
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  call Math.abs 1 args
@Math.abs$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.4)
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_7
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_7
D;JLT
@R13
D=D-M
@CHECK_LT_7
0;JMP
(Y_NEG_LT_7)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_7
D;JGT
@R13
D=D-M
@CHECK_LT_7
0;JMP
(Y_POS_X_NEG_LT_7)
D=-1
@CHECK_LT_7
0;JMP
(Y_NEG_X_POS_LT_7)
D=1
@CHECK_LT_7
0;JMP
(CHECK_LT_7)
@TRUE_LT_7
D;JLT
D=0
@CONTINUE_LT_7
0;JMP
(TRUE_LT_7)
D=-1
(CONTINUE_LT_7)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE0
D;JNE
//  goto IF_FALSE0
@Math.multiply$IF_FALSE0
0;JMP
//  label IF_TRUE0
(Math.multiply$IF_TRUE0)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE0
(Math.multiply$IF_FALSE0)
//  label WHILE_EXP0
(Math.multiply$WHILE_EXP0)
// C_PUSH local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_8
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_8
D;JLT
@R13
D=D-M
@CHECK_LT_8
0;JMP
(Y_NEG_LT_8)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_8
D;JGT
@R13
D=D-M
@CHECK_LT_8
0;JMP
(Y_POS_X_NEG_LT_8)
D=-1
@CHECK_LT_8
0;JMP
(Y_NEG_X_POS_LT_8)
D=1
@CHECK_LT_8
0;JMP
(CHECK_LT_8)
@TRUE_LT_8
D;JLT
D=0
@CONTINUE_LT_8
0;JMP
(TRUE_LT_8)
D=-1
(CONTINUE_LT_8)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.multiply$WHILE_END0
D;JNE
// C_PUSH local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_9
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_9
D;JLT
@R13
D=D-M
@CHECK_GT_9
0;JMP
(Y_NEG_GT_9)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_9
D;JGT
@R13
D=D-M
@CHECK_GT_9
0;JMP
(Y_POS_X_NEG_GT_9)
D=-1
@CHECK_GT_9
0;JMP
(Y_NEG_X_POS_GT_9)
D=1
@CHECK_GT_9
0;JMP
(CHECK_GT_9)
@TRUE_GT_9
D;JGT
D=0
@CONTINUE_GT_9
0;JMP
(TRUE_GT_9)
D=-1
(CONTINUE_GT_9)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE1
D;JNE
//  goto IF_FALSE1
@Math.multiply$IF_FALSE1
0;JMP
//  label IF_TRUE1
(Math.multiply$IF_TRUE1)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE1
(Math.multiply$IF_FALSE1)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto WHILE_EXP0
@Math.multiply$WHILE_EXP0
0;JMP
//  label WHILE_END0
(Math.multiply$WHILE_END0)
// C_PUSH local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE2
D;JNE
//  goto IF_FALSE2
@Math.multiply$IF_FALSE2
0;JMP
//  label IF_TRUE2
(Math.multiply$IF_TRUE2)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE2
(Math.multiply$IF_FALSE2)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Math.divide 4 vars
(Math.divide)
//  initializes 4 variables to 0
@SP
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_EQ_10
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_EQ_10
D;JLT
@R13
D=D-M
@CHECK_EQ_10
0;JMP
(Y_NEG_EQ_10)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_EQ_10
D;JGT
@R13
D=D-M
@CHECK_EQ_10
0;JMP
(Y_POS_X_NEG_EQ_10)
D=-1
@CHECK_EQ_10
0;JMP
(Y_NEG_X_POS_EQ_10)
D=1
@CHECK_EQ_10
0;JMP
(CHECK_EQ_10)
@TRUE_EQ_10
D;JEQ
D=0
@CONTINUE_EQ_10
0;JMP
(TRUE_EQ_10)
D=-1
(CONTINUE_EQ_10)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE0
D;JNE
//  goto IF_FALSE0
@Math.divide$IF_FALSE0
0;JMP
//  label IF_TRUE0
(Math.divide$IF_TRUE0)
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//  call Sys.error 1 args
@Sys.error$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.5)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
//  label IF_FALSE0
(Math.divide$IF_FALSE0)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_11
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_11
D;JLT
@R13
D=D-M
@CHECK_LT_11
0;JMP
(Y_NEG_LT_11)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_11
D;JGT
@R13
D=D-M
@CHECK_LT_11
0;JMP
(Y_POS_X_NEG_LT_11)
D=-1
@CHECK_LT_11
0;JMP
(Y_NEG_X_POS_LT_11)
D=1
@CHECK_LT_11
0;JMP
(CHECK_LT_11)
@TRUE_LT_11
D;JLT
D=0
@CONTINUE_LT_11
0;JMP
(TRUE_LT_11)
D=-1
(CONTINUE_LT_11)
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_12
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_12
D;JLT
@R13
D=D-M
@CHECK_GT_12
0;JMP
(Y_NEG_GT_12)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_12
D;JGT
@R13
D=D-M
@CHECK_GT_12
0;JMP
(Y_POS_X_NEG_GT_12)
D=-1
@CHECK_GT_12
0;JMP
(Y_NEG_X_POS_GT_12)
D=1
@CHECK_GT_12
0;JMP
(CHECK_GT_12)
@TRUE_GT_12
D;JGT
D=0
@CONTINUE_GT_12
0;JMP
(TRUE_GT_12)
D=-1
(CONTINUE_GT_12)
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_13
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_13
D;JLT
@R13
D=D-M
@CHECK_GT_13
0;JMP
(Y_NEG_GT_13)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_13
D;JGT
@R13
D=D-M
@CHECK_GT_13
0;JMP
(Y_POS_X_NEG_GT_13)
D=-1
@CHECK_GT_13
0;JMP
(Y_NEG_X_POS_GT_13)
D=1
@CHECK_GT_13
0;JMP
(CHECK_GT_13)
@TRUE_GT_13
D;JGT
D=0
@CONTINUE_GT_13
0;JMP
(TRUE_GT_13)
D=-1
(CONTINUE_GT_13)
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_14
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_14
D;JLT
@R13
D=D-M
@CHECK_LT_14
0;JMP
(Y_NEG_LT_14)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_14
D;JGT
@R13
D=D-M
@CHECK_LT_14
0;JMP
(Y_POS_X_NEG_LT_14)
D=-1
@CHECK_LT_14
0;JMP
(Y_NEG_X_POS_LT_14)
D=1
@CHECK_LT_14
0;JMP
(CHECK_LT_14)
@TRUE_LT_14
D;JLT
D=0
@CONTINUE_LT_14
0;JMP
(TRUE_LT_14)
D=-1
(CONTINUE_LT_14)
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// or
@SP
AM=M-1
D=M
A=A-1
M=D|M
// C_POP local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  call Math.abs 1 args
@Math.abs$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.6)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  call Math.abs 1 args
@Math.abs$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.7)
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label WHILE_EXP0
(Math.divide$WHILE_EXP0)
// C_PUSH local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.divide$WHILE_END0
D;JNE
// C_PUSH constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_15
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_15
D;JLT
@R13
D=D-M
@CHECK_LT_15
0;JMP
(Y_NEG_LT_15)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_15
D;JGT
@R13
D=D-M
@CHECK_LT_15
0;JMP
(Y_POS_X_NEG_LT_15)
D=-1
@CHECK_LT_15
0;JMP
(Y_NEG_X_POS_LT_15)
D=1
@CHECK_LT_15
0;JMP
(CHECK_LT_15)
@TRUE_LT_15
D;JLT
D=0
@CONTINUE_LT_15
0;JMP
(TRUE_LT_15)
D=-1
(CONTINUE_LT_15)
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE1
D;JNE
//  goto IF_FALSE1
@Math.divide$IF_FALSE1
0;JMP
//  label IF_TRUE1
(Math.divide$IF_TRUE1)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_16
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_16
D;JLT
@R13
D=D-M
@CHECK_GT_16
0;JMP
(Y_NEG_GT_16)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_16
D;JGT
@R13
D=D-M
@CHECK_GT_16
0;JMP
(Y_POS_X_NEG_GT_16)
D=-1
@CHECK_GT_16
0;JMP
(Y_NEG_X_POS_GT_16)
D=1
@CHECK_GT_16
0;JMP
(CHECK_GT_16)
@TRUE_GT_16
D;JGT
D=0
@CONTINUE_GT_16
0;JMP
(TRUE_GT_16)
D=-1
(CONTINUE_GT_16)
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE2
D;JNE
//  goto IF_FALSE2
@Math.divide$IF_FALSE2
0;JMP
//  label IF_TRUE2
(Math.divide$IF_TRUE2)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE2
(Math.divide$IF_FALSE2)
//  label IF_FALSE1
(Math.divide$IF_FALSE1)
//  goto WHILE_EXP0
@Math.divide$WHILE_EXP0
0;JMP
//  label WHILE_END0
(Math.divide$WHILE_END0)
//  label WHILE_EXP1
(Math.divide$WHILE_EXP1)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_17
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_17
D;JLT
@R13
D=D-M
@CHECK_GT_17
0;JMP
(Y_NEG_GT_17)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_17
D;JGT
@R13
D=D-M
@CHECK_GT_17
0;JMP
(Y_POS_X_NEG_GT_17)
D=-1
@CHECK_GT_17
0;JMP
(Y_NEG_X_POS_GT_17)
D=1
@CHECK_GT_17
0;JMP
(CHECK_GT_17)
@TRUE_GT_17
D;JGT
D=0
@CONTINUE_GT_17
0;JMP
(TRUE_GT_17)
D=-1
(CONTINUE_GT_17)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END1
@SP
AM=M-1
D=M
@Math.divide$WHILE_END1
D;JNE
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_18
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_18
D;JLT
@R13
D=D-M
@CHECK_GT_18
0;JMP
(Y_NEG_GT_18)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_18
D;JGT
@R13
D=D-M
@CHECK_GT_18
0;JMP
(Y_POS_X_NEG_GT_18)
D=-1
@CHECK_GT_18
0;JMP
(Y_NEG_X_POS_GT_18)
D=1
@CHECK_GT_18
0;JMP
(CHECK_GT_18)
@TRUE_GT_18
D;JGT
D=0
@CONTINUE_GT_18
0;JMP
(TRUE_GT_18)
D=-1
(CONTINUE_GT_18)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE3
D;JNE
//  goto IF_FALSE3
@Math.divide$IF_FALSE3
0;JMP
//  label IF_TRUE3
(Math.divide$IF_TRUE3)
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE3
(Math.divide$IF_FALSE3)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto WHILE_EXP1
@Math.divide$WHILE_EXP1
0;JMP
//  label WHILE_END1
(Math.divide$WHILE_END1)
// C_PUSH local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE4
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE4
D;JNE
//  goto IF_FALSE4
@Math.divide$IF_FALSE4
0;JMP
//  label IF_TRUE4
(Math.divide$IF_TRUE4)
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE4
(Math.divide$IF_FALSE4)
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Math.sqrt 2 vars
(Math.sqrt)
//  initializes 2 variables to 0
@SP
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_19
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_19
D;JLT
@R13
D=D-M
@CHECK_LT_19
0;JMP
(Y_NEG_LT_19)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_19
D;JGT
@R13
D=D-M
@CHECK_LT_19
0;JMP
(Y_POS_X_NEG_LT_19)
D=-1
@CHECK_LT_19
0;JMP
(Y_NEG_X_POS_LT_19)
D=1
@CHECK_LT_19
0;JMP
(CHECK_LT_19)
@TRUE_LT_19
D;JLT
D=0
@CONTINUE_LT_19
0;JMP
(TRUE_LT_19)
D=-1
(CONTINUE_LT_19)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE0
D;JNE
//  goto IF_FALSE0
@Math.sqrt$IF_FALSE0
0;JMP
//  label IF_TRUE0
(Math.sqrt$IF_TRUE0)
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//  call Sys.error 1 args
@Sys.error$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.8)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
//  label IF_FALSE0
(Math.sqrt$IF_FALSE0)
// C_PUSH constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label WHILE_EXP0
(Math.sqrt$WHILE_EXP0)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_20
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_20
D;JLT
@R13
D=D-M
@CHECK_GT_20
0;JMP
(Y_NEG_GT_20)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_20
D;JGT
@R13
D=D-M
@CHECK_GT_20
0;JMP
(Y_POS_X_NEG_GT_20)
D=-1
@CHECK_GT_20
0;JMP
(Y_NEG_X_POS_GT_20)
D=1
@CHECK_GT_20
0;JMP
(CHECK_GT_20)
@TRUE_GT_20
D;JGT
D=0
@CONTINUE_GT_20
0;JMP
(TRUE_GT_20)
D=-1
(CONTINUE_GT_20)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.sqrt$WHILE_END0
D;JNE
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//  call Math.multiply 2 args
@Math.multiply$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.9)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_21
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_21
D;JLT
@R13
D=D-M
@CHECK_GT_21
0;JMP
(Y_NEG_GT_21)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_21
D;JGT
@R13
D=D-M
@CHECK_GT_21
0;JMP
(Y_POS_X_NEG_GT_21)
D=-1
@CHECK_GT_21
0;JMP
(Y_NEG_X_POS_GT_21)
D=1
@CHECK_GT_21
0;JMP
(CHECK_GT_21)
@TRUE_GT_21
D;JGT
D=0
@CONTINUE_GT_21
0;JMP
(TRUE_GT_21)
D=-1
(CONTINUE_GT_21)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE1
D;JNE
//  goto IF_FALSE1
@Math.sqrt$IF_FALSE1
0;JMP
//  label IF_TRUE1
(Math.sqrt$IF_TRUE1)
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE1
(Math.sqrt$IF_FALSE1)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto WHILE_EXP0
@Math.sqrt$WHILE_EXP0
0;JMP
//  label WHILE_END0
(Math.sqrt$WHILE_END0)
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Math.max 0 vars
(Math.max)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_22
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_22
D;JLT
@R13
D=D-M
@CHECK_GT_22
0;JMP
(Y_NEG_GT_22)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_22
D;JGT
@R13
D=D-M
@CHECK_GT_22
0;JMP
(Y_POS_X_NEG_GT_22)
D=-1
@CHECK_GT_22
0;JMP
(Y_NEG_X_POS_GT_22)
D=1
@CHECK_GT_22
0;JMP
(CHECK_GT_22)
@TRUE_GT_22
D;JGT
D=0
@CONTINUE_GT_22
0;JMP
(TRUE_GT_22)
D=-1
(CONTINUE_GT_22)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.max$IF_TRUE0
D;JNE
//  goto IF_FALSE0
@Math.max$IF_FALSE0
0;JMP
//  label IF_TRUE0
(Math.max$IF_TRUE0)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE0
(Math.max$IF_FALSE0)
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Math.min 0 vars
(Math.min)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_23
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_23
D;JLT
@R13
D=D-M
@CHECK_LT_23
0;JMP
(Y_NEG_LT_23)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_23
D;JGT
@R13
D=D-M
@CHECK_LT_23
0;JMP
(Y_POS_X_NEG_LT_23)
D=-1
@CHECK_LT_23
0;JMP
(Y_NEG_X_POS_LT_23)
D=1
@CHECK_LT_23
0;JMP
(CHECK_LT_23)
@TRUE_LT_23
D;JLT
D=0
@CONTINUE_LT_23
0;JMP
(TRUE_LT_23)
D=-1
(CONTINUE_LT_23)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.min$IF_TRUE0
D;JNE
//  goto IF_FALSE0
@Math.min$IF_FALSE0
0;JMP
//  label IF_TRUE0
(Math.min$IF_TRUE0)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE0
(Math.min$IF_FALSE0)
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Array.new 0 vars
(Array.new)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_24
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_24
D;JLT
@R13
D=D-M
@CHECK_GT_24
0;JMP
(Y_NEG_GT_24)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_24
D;JGT
@R13
D=D-M
@CHECK_GT_24
0;JMP
(Y_POS_X_NEG_GT_24)
D=-1
@CHECK_GT_24
0;JMP
(Y_NEG_X_POS_GT_24)
D=1
@CHECK_GT_24
0;JMP
(CHECK_GT_24)
@TRUE_GT_24
D;JGT
D=0
@CONTINUE_GT_24
0;JMP
(TRUE_GT_24)
D=-1
(CONTINUE_GT_24)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Array.new$IF_TRUE0
D;JNE
//  goto IF_FALSE0
@Array.new$IF_FALSE0
0;JMP
//  label IF_TRUE0
(Array.new$IF_TRUE0)
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//  call Sys.error 1 args
@Sys.error$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.0)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
//  label IF_FALSE0
(Array.new$IF_FALSE0)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  call Memory.alloc 1 args
@Memory.alloc$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret.1)
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Array.dispose 0 vars
(Array.dispose)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//  call Memory.deAlloc 1 args
@Memory.deAlloc$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret.2)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Main.main 3 vars
(Main.main)
//  initializes 3 variables to 0
@SP
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//  call Memory.poke 2 args
@Memory.poke$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Memory.poke$ret.0)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_PUSH constant 5001
@5001
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//  call Memory.poke 2 args
@Memory.poke$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Memory.poke$ret.1)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
//  label WHILE_EXP0
(Main.main$WHILE_EXP0)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_25
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_25
D;JLT
@R13
D=D-M
@CHECK_LT_25
0;JMP
(Y_NEG_LT_25)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_25
D;JGT
@R13
D=D-M
@CHECK_LT_25
0;JMP
(Y_POS_X_NEG_LT_25)
D=-1
@CHECK_LT_25
0;JMP
(Y_NEG_X_POS_LT_25)
D=1
@CHECK_LT_25
0;JMP
(CHECK_LT_25)
@TRUE_LT_25
D;JLT
D=0
@CONTINUE_LT_25
0;JMP
(TRUE_LT_25)
D=-1
(CONTINUE_LT_25)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END0
@SP
AM=M-1
D=M
@Main.main$WHILE_END0
D;JNE
// C_PUSH constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//  call Memory.peek 1 args
@Memory.peek$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Memory.peek$ret.2)
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//  call Memory.peek 1 args
@Memory.peek$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Memory.peek$ret.3)
// C_POP local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//  call Memory.poke 2 args
@Memory.poke$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Memory.poke$ret.4)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto WHILE_EXP0
@Main.main$WHILE_EXP0
0;JMP
//  label WHILE_END0
(Main.main$WHILE_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Sys.init 0 vars
(Sys.init)
//  call Memory.init 0 args
@Memory.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Memory.init$ret.0)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
//  call Math.init 0 args
@Math.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Math.init$ret.1)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
//  call Main.main 0 args
@Main.main$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Main.main$ret.2)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
//  label WHILE_EXP0
(Sys.init$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.init$WHILE_END0
D;JNE
//  goto WHILE_EXP0
@Sys.init$WHILE_EXP0
0;JMP
//  label WHILE_END0
(Sys.init$WHILE_END0)
//  function Sys.halt 0 vars
(Sys.halt)
//  label WHILE_EXP0
(Sys.halt$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.halt$WHILE_END0
D;JNE
//  goto WHILE_EXP0
@Sys.halt$WHILE_EXP0
0;JMP
//  label WHILE_END0
(Sys.halt$WHILE_END0)
//  function Sys.wait 1 vars
(Sys.wait)
//  initializes 1 variables to 0
@SP
A=M
M=0
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_26
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_26
D;JLT
@R13
D=D-M
@CHECK_LT_26
0;JMP
(Y_NEG_LT_26)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_26
D;JGT
@R13
D=D-M
@CHECK_LT_26
0;JMP
(Y_POS_X_NEG_LT_26)
D=-1
@CHECK_LT_26
0;JMP
(Y_NEG_X_POS_LT_26)
D=1
@CHECK_LT_26
0;JMP
(CHECK_LT_26)
@TRUE_LT_26
D;JLT
D=0
@CONTINUE_LT_26
0;JMP
(TRUE_LT_26)
D=-1
(CONTINUE_LT_26)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Sys.wait$IF_TRUE0
D;JNE
//  goto IF_FALSE0
@Sys.wait$IF_FALSE0
0;JMP
//  label IF_TRUE0
(Sys.wait$IF_TRUE0)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//  call Sys.error 1 args
@Sys.error$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.3)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
//  label IF_FALSE0
(Sys.wait$IF_FALSE0)
//  label WHILE_EXP0
(Sys.wait$WHILE_EXP0)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_27
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_27
D;JLT
@R13
D=D-M
@CHECK_GT_27
0;JMP
(Y_NEG_GT_27)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_27
D;JGT
@R13
D=D-M
@CHECK_GT_27
0;JMP
(Y_POS_X_NEG_GT_27)
D=-1
@CHECK_GT_27
0;JMP
(Y_NEG_X_POS_GT_27)
D=1
@CHECK_GT_27
0;JMP
(CHECK_GT_27)
@TRUE_GT_27
D;JGT
D=0
@CONTINUE_GT_27
0;JMP
(TRUE_GT_27)
D=-1
(CONTINUE_GT_27)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END0
D;JNE
// C_PUSH constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label WHILE_EXP1
(Sys.wait$WHILE_EXP1)
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_28
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_28
D;JLT
@R13
D=D-M
@CHECK_GT_28
0;JMP
(Y_NEG_GT_28)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_28
D;JGT
@R13
D=D-M
@CHECK_GT_28
0;JMP
(Y_POS_X_NEG_GT_28)
D=-1
@CHECK_GT_28
0;JMP
(Y_NEG_X_POS_GT_28)
D=1
@CHECK_GT_28
0;JMP
(CHECK_GT_28)
@TRUE_GT_28
D;JGT
D=0
@CONTINUE_GT_28
0;JMP
(TRUE_GT_28)
D=-1
(CONTINUE_GT_28)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END1
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END1
D;JNE
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto WHILE_EXP1
@Sys.wait$WHILE_EXP1
0;JMP
//  label WHILE_END1
(Sys.wait$WHILE_END1)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto WHILE_EXP0
@Sys.wait$WHILE_EXP0
0;JMP
//  label WHILE_END0
(Sys.wait$WHILE_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Sys.error 0 vars
(Sys.error)
//  label WHILE_EXP0
(Sys.error$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.error$WHILE_END0
D;JNE
//  goto WHILE_EXP0
@Sys.error$WHILE_EXP0
0;JMP
//  label WHILE_END0
(Sys.error$WHILE_END0)
//  function Memory.init 0 vars
(Memory.init)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0
@SP
AM=M-1
D=M
@Memory.0
M=D
// C_PUSH constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2049
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2050
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Memory.peek 0 vars
(Memory.peek)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Memory.poke 0 vars
(Memory.poke)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Memory.alloc 2 vars
(Memory.alloc)
//  initializes 2 variables to 0
@SP
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_29
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_29
D;JLT
@R13
D=D-M
@CHECK_LT_29
0;JMP
(Y_NEG_LT_29)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_29
D;JGT
@R13
D=D-M
@CHECK_LT_29
0;JMP
(Y_POS_X_NEG_LT_29)
D=-1
@CHECK_LT_29
0;JMP
(Y_NEG_X_POS_LT_29)
D=1
@CHECK_LT_29
0;JMP
(CHECK_LT_29)
@TRUE_LT_29
D;JLT
D=0
@CONTINUE_LT_29
0;JMP
(TRUE_LT_29)
D=-1
(CONTINUE_LT_29)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE0
D;JNE
//  goto IF_FALSE0
@Memory.alloc$IF_FALSE0
0;JMP
//  label IF_TRUE0
(Memory.alloc$IF_TRUE0)
// C_PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//  call Sys.error 1 args
@Sys.error$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.0)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
//  label IF_FALSE0
(Memory.alloc$IF_FALSE0)
// C_PUSH constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label WHILE_EXP0
(Memory.alloc$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_LT_30
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_LT_30
D;JLT
@R13
D=D-M
@CHECK_LT_30
0;JMP
(Y_NEG_LT_30)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_LT_30
D;JGT
@R13
D=D-M
@CHECK_LT_30
0;JMP
(Y_POS_X_NEG_LT_30)
D=-1
@CHECK_LT_30
0;JMP
(Y_NEG_X_POS_LT_30)
D=1
@CHECK_LT_30
0;JMP
(CHECK_LT_30)
@TRUE_LT_30
D;JLT
D=0
@CONTINUE_LT_30
0;JMP
(TRUE_LT_30)
D=-1
(CONTINUE_LT_30)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
//  if-goto WHILE_END0
@SP
AM=M-1
D=M
@Memory.alloc$WHILE_END0
D;JNE
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto WHILE_EXP0
@Memory.alloc$WHILE_EXP0
0;JMP
//  label WHILE_END0
(Memory.alloc$WHILE_END0)
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16379
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_31
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_31
D;JLT
@R13
D=D-M
@CHECK_GT_31
0;JMP
(Y_NEG_GT_31)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_31
D;JGT
@R13
D=D-M
@CHECK_GT_31
0;JMP
(Y_POS_X_NEG_GT_31)
D=-1
@CHECK_GT_31
0;JMP
(Y_NEG_X_POS_GT_31)
D=1
@CHECK_GT_31
0;JMP
(CHECK_GT_31)
@TRUE_GT_31
D;JGT
D=0
@CONTINUE_GT_31
0;JMP
(TRUE_GT_31)
D=-1
(CONTINUE_GT_31)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE1
D;JNE
//  goto IF_FALSE1
@Memory.alloc$IF_FALSE1
0;JMP
//  label IF_TRUE1
(Memory.alloc$IF_TRUE1)
// C_PUSH constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//  call Sys.error 1 args
@Sys.error$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.1)
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
//  label IF_FALSE1
(Memory.alloc$IF_FALSE1)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// gt
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_GT_32
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_GT_32
D;JLT
@R13
D=D-M
@CHECK_GT_32
0;JMP
(Y_NEG_GT_32)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_GT_32
D;JGT
@R13
D=D-M
@CHECK_GT_32
0;JMP
(Y_POS_X_NEG_GT_32)
D=-1
@CHECK_GT_32
0;JMP
(Y_NEG_X_POS_GT_32)
D=1
@CHECK_GT_32
0;JMP
(CHECK_GT_32)
@TRUE_GT_32
D;JGT
D=0
@CONTINUE_GT_32
0;JMP
(TRUE_GT_32)
D=-1
(CONTINUE_GT_32)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE2
D;JNE
//  goto IF_FALSE2
@Memory.alloc$IF_FALSE2
0;JMP
//  label IF_TRUE2
(Memory.alloc$IF_TRUE2)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// eq
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_EQ_33
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_EQ_33
D;JLT
@R13
D=D-M
@CHECK_EQ_33
0;JMP
(Y_NEG_EQ_33)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_EQ_33
D;JGT
@R13
D=D-M
@CHECK_EQ_33
0;JMP
(Y_POS_X_NEG_EQ_33)
D=-1
@CHECK_EQ_33
0;JMP
(Y_NEG_X_POS_EQ_33)
D=1
@CHECK_EQ_33
0;JMP
(CHECK_EQ_33)
@TRUE_EQ_33
D;JEQ
D=0
@CONTINUE_EQ_33
0;JMP
(TRUE_EQ_33)
D=-1
(CONTINUE_EQ_33)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE3
D;JNE
//  goto IF_FALSE3
@Memory.alloc$IF_FALSE3
0;JMP
//  label IF_TRUE3
(Memory.alloc$IF_TRUE3)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto IF_END3
@Memory.alloc$IF_END3
0;JMP
//  label IF_FALSE3
(Memory.alloc$IF_FALSE3)
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_END3
(Memory.alloc$IF_END3)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_FALSE2
(Memory.alloc$IF_FALSE2)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//  function Memory.deAlloc 2 vars
(Memory.deAlloc)
//  initializes 2 variables to 0
@SP
A=M
M=0
@SP
M=M+1
A=M
M=0
@SP
M=M+1
// C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_EQ_34
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_EQ_34
D;JLT
@R13
D=D-M
@CHECK_EQ_34
0;JMP
(Y_NEG_EQ_34)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_EQ_34
D;JGT
@R13
D=D-M
@CHECK_EQ_34
0;JMP
(Y_POS_X_NEG_EQ_34)
D=-1
@CHECK_EQ_34
0;JMP
(Y_NEG_X_POS_EQ_34)
D=1
@CHECK_EQ_34
0;JMP
(CHECK_EQ_34)
@TRUE_EQ_34
D;JEQ
D=0
@CONTINUE_EQ_34
0;JMP
(TRUE_EQ_34)
D=-1
(CONTINUE_EQ_34)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE0
D;JNE
//  goto IF_FALSE0
@Memory.deAlloc$IF_FALSE0
0;JMP
//  label IF_TRUE0
(Memory.deAlloc$IF_TRUE0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto IF_END0
@Memory.deAlloc$IF_END0
0;JMP
//  label IF_FALSE0
(Memory.deAlloc$IF_FALSE0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// eq
@SP
AM=M-1
D=M
@R13
M=D
@Y_NEG_EQ_35
D;JLT
@SP
AM=M-1
D=M
@Y_POS_X_NEG_EQ_35
D;JLT
@R13
D=D-M
@CHECK_EQ_35
0;JMP
(Y_NEG_EQ_35)
@SP
AM=M-1
D=M
@Y_NEG_X_POS_EQ_35
D;JGT
@R13
D=D-M
@CHECK_EQ_35
0;JMP
(Y_POS_X_NEG_EQ_35)
D=-1
@CHECK_EQ_35
0;JMP
(Y_NEG_X_POS_EQ_35)
D=1
@CHECK_EQ_35
0;JMP
(CHECK_EQ_35)
@TRUE_EQ_35
D;JEQ
D=0
@CONTINUE_EQ_35
0;JMP
(TRUE_EQ_35)
D=-1
(CONTINUE_EQ_35)
@SP
A=M
M=D
@SP
M=M+1
//  if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE1
D;JNE
//  goto IF_FALSE1
@Memory.deAlloc$IF_FALSE1
0;JMP
//  label IF_TRUE1
(Memory.deAlloc$IF_TRUE1)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  goto IF_END1
@Memory.deAlloc$IF_END1
0;JMP
//  label IF_FALSE1
(Memory.deAlloc$IF_FALSE1)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
AM=M-1
D=M
@5
M=D
// C_POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// C_PUSH temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//  label IF_END1
(Memory.deAlloc$IF_END1)
//  label IF_END0
(Memory.deAlloc$IF_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//  return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
