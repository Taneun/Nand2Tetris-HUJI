// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    And16(a= instruction, b=true,
    out[15]=opCode1,
    out[12]=opCode2,
    out[11]=zx,
    out[10]=nx,
    out[9]=zy,
    out[8]=ny,
    out[7]=f,
    out[6]=no,
    out[5]=regALoad,
    out[4]=regDLoad,
    out[3]=write,
    out[2]=j1,
    out[1]=j2,
    out[0]=j3
    );

    DMux(in= true, sel= opCode1, a= aCode, b= cCode);

    //Register A
    And(a=cCode, b=regALoad, out=compA);
    Mux16(a= instruction, b= aluOutput, sel= compA, out= muxOut1);
    Or(a=aCode, b=compA, out=loadA);
    ARegister(in= muxOut1, load= loadA, out= regAOut);

    //Register D
    DRegister(in= aluOutput, load= loadD, out= regDOut);
    And(a=regDLoad, b= cCode, out=loadD);

    Mux16(a= regAOut, b= inM, sel= opCode2, out= muxOut2);
    
    ALU(x= regDOut, y= muxOut2,
    zx= zx, nx= nx, zy= zy, ny= ny, f= f, no= no, 
    out=aluOutput, zr= zr, ng= ng);

    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=notZr, b=notNg, out=jgt);
    And(a=j3, b=jgt, out=condJGT);
    And(a=zr, b=j2, out=condJEQ);
    And(a=notNg, b=true, out=condJGE);
    And(a=ng, b=j1, out=condJLT);
    And(a=notZr, b=true, out=condJNE);
    Or(a=condJLT, b=condJEQ, out=condJLE);
    Or(a=condJLE, b=condJGT, out=condJMP);
    And(a=cCode, b=condJMP, out=jumpOut);

    //Outputs
    
    And16(a=aluOutput, b=true, out=outM);
    And16(a=regAOut, b=true, out[0..14]=addressM);
    And(a= cCode, b= write, out= writeM);
    Not(in= jumpOut, out= inc);
    PC(in= regAOut, load= jumpOut, inc= inc, reset= reset, out[0..14]= pc);
}