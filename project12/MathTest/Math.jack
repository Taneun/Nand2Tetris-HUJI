// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

        static int qy2;
        /** Initializes the library. */
        function void init() {
            return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0)
            {
                return (-x);
            }
            return x;
        }

        /**
         * Converts a decimal integer to a binary string.
         * @param number The decimal integer to be converted.
         * @return A string representing the binary equivalent of the decimal number.
         */
        function Array decimalToBinary(int num) {
            var int i;
            var boolean isNegative;
            var Array binaryArray;
            let binaryArray = Array.new(16); // Initialize the array to 0s

            // Initialize the array to 0s
            let i = 0;
            while (i < 16)
            {
                let binaryArray[i] = 0;
                let i = i + 1;
            }

            // Check if the number is negative
            let isNegative = (num < 0);

            // Handle positive and negative cases
            if (isNegative) {
                let num = Math.abs(num); // Take the absolute value
            }

            // Convert absolute value to binary
            let i = 15;
            while (num > 0) {
                let binaryArray[i] = num & 1; // Extract the least significant bit
                let num = Math.divide(num, 2); // Shift right
                let i = i - 1;
            }

            // If the number is negative, apply two's complement
            if (isNegative) {
                // Step 1: Invert the bits
                let i = 0;
                while (i < 16) {
                    let binaryArray[i] = ~binaryArray[i];
                    let i = i + 1;
                }

                // Step 2: Add 1 to the least significant bit
                let i = 15;
                while (~(i < 0)) {
                    if (binaryArray[i] = 0) {
                        let binaryArray[i] = 1;
                        let i = -1; // Stop after adding 1
                    } else {
                        let binaryArray[i] = 0;
                        let i = i - 1;
                    }
                }
            }

            return binaryArray;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
          var int sum, shiftedX, mask, sign, currBit;
          let sum = 0;
          let shiftedX = x;
          let currBit = 0;
          let mask = 1;
          if (y < 0) {
            let sign = -1;
            let y = -y;
          } else {
            let sign = 1;
          }
          while (currBit < 16) {
            if (~((y & mask) = 0)) {
              let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let currBit = currBit + 1;
            let mask = ^mask;
          }
          if (sign = -1) {
            let sum = -sum;
          }
            return sum;
        }

        /**
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int q;
            var boolean negativeResult;

            // Handle division by 0
            if (y = 0) {
                do Sys.error(3); // Division by zero error
                return 0;
            }

            // Track if result should be negative
            let negativeResult = false;
            if (x < 0) {
                let x = -x;
                let negativeResult = ~negativeResult;
            }
            if (y < 0) {
                let y = -y;
                let negativeResult = ~negativeResult;
            }

            // Base case: if y > x, return 0
            if ((y > x) | (x = 0)) {
                let qy2 = 0;
                return 0;
            }

            // Main recursive case
            let q = Math.divide(x, y + y); // Use addition instead of shift

            if ((x - qy2) < y) {
                if (negativeResult) {
                    return -(q+q);
                }
                return q+q;
            }
            else {
                let qy2 = qy2 + y; // Update 2*q*y
                if (negativeResult) {
                    return -(q+q + 1);
                }
                return q+q + 1;
            }
        }


        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int y, j, power, square, temp;
            if ((x = 0) | (x = 1)) {
                return x;
            }

            let y = 0; // Initialize y to 0
            let j = 7;

            while (~(j < 0)) {
                // Calculate 2^j using shift-left operator ^
                let power = 1; // Shift left j times
                let temp = j;
                while (temp > 0) {
                    let power = ^power;
                    let temp = temp - 1;
                }

                // Check if (y + 2^j)^2 <= x
                let square = y + power; // y + 2^j
                let temp = square;
                while (temp > 0) { // Compute (y + power)^2 using addition
                    let square = square + y + power;
                    let temp = temp - 1;
                 }
                if (~(square > x)  & (square > 0)) {
                    let y = y + power; // Update y
                }
                // Move to the next lower bit
                let j = j - 1;
            }
            return y + 1; // YOLO it's working
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a > b) {
            return a;
            }
            return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a > b) {
            return b;
            }
            return a;
        }
}
