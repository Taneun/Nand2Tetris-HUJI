// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

        static boolean currColor, white, black;
        static Array screen;
        static Array powersOfTwo;

        /** Initializes the Screen. */
        function void init() {
            let screen = 16384;
            let black = true;
            let white = false;
            let currColor = true;
            let powersOfTwo = Array.new(17);
            let powersOfTwo[0] = 1;
            let powersOfTwo[1] = 2;
            let powersOfTwo[2] = 4;
            let powersOfTwo[3] = 8;
            let powersOfTwo[4] = 16;
            let powersOfTwo[5] = 32;
            let powersOfTwo[6] = 64;
            let powersOfTwo[7] = 128;
            let powersOfTwo[8] = 256;
            let powersOfTwo[9] = 512;
            let powersOfTwo[10] = 1024;
            let powersOfTwo[11] = 2048;
            let powersOfTwo[12] = 4096;
            let powersOfTwo[13] = 8192;
            let powersOfTwo[14] = 16384;
            let powersOfTwo[15] = (16384 +16384);
            let powersOfTwo[16] = 0;
            return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
            var int i;
            let i = 0;
            while (i < 8192)
            {
                let screen[i] = white;
                let i = i + 1;
            }
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let currColor = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
                // Step 1: Calculate the RAM address
            var int address, bitPosition, currentValue, temp, bitMask;

            // Address is calculated as 16384 + (32 * y) + (x / 16)
            let address = 16384 + (^(^(^(^(^y))))) + (#(#(#(#x)))); // (32 * y) + (x / 16)

            // Step 2: Get the current value at the address (16-bit value)
            let currentValue = Memory.peek(address);

            // Step 3: Calculate the bit position within the 16-bit value
            let bitPosition = x & 15; // n % 2^i = n & (2^i - 1)
            let bitMask = 1;
            let temp = bitPosition;
            while (temp > 0) {
                let bitMask = ^bitMask; // Equivalent to multiplying by 2
                let temp = temp - 1;
            }

            // Step 4: Set the bit corresponding to the pixel using bitwise OR
            let currentValue = currentValue | bitMask; // Set the bit at bitPosition
            if (currColor)
            {
                let currentValue = currentValue | bitMask;
            }
            else
            {
                let currentValue = currentValue & ~bitMask;
            }
            // Step 5: Write the modified value back to memory
            do Memory.poke(address, currentValue);

            return;
        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
            var int x, y, a, b, diff, dx, dy, toAdd, temp;
            if (x1 = x2)
            {
                let y = Math.min(y1, y2);
                do Screen.drawVertical(x1, y, Math.abs(y2 - y1));
                return;
            }
            if (x1 > x2)
            {
                let temp = x1;
                let x1 = x2;
                let x2 = temp;
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
            }
            let x = x1;
            let y = y1;
            let a = 0;
            let b = 0;
            let diff = 0;
            let dx = x2 - x1;
            let dy = y2 - y1;
            if (dy = 0)
            {
                do Screen.drawHorizontal(Math.min(x1, x2), Math.max(x1, x2), y);
                return;
            }
            let toAdd = 1;
            if (dy < 0)
            {
                let toAdd = -1;
            }
            while (~(a > Math.abs(dx)) & (~(b > Math.abs(dy))))
            {
                do Screen.drawPixel(x + a, y + b);
                if (diff < 0)
                {
                    let a = a + 1;
                    let diff = diff + Math.abs(dy);
                }
                else
                {
                    let b = b + toAdd;
                    let diff = diff - Math.abs(dx);
                }
            }
            return;
        }

        function void drawHorizontal(int x1, int x2, int y) {
            var int startAddress, endAddress, startMod16, endMod16;
            var int i, leftMask, rightMask, combMask;

            // Calculate start and end addresses
            let startAddress = (^(^(^(^(^y))))) + (#(#(#(#x1)))); // 16384 + 32*y + x/16
            let endAddress = (^(^(^(^(^y))))) + (#(#(#(#x2))));

            // Handle edge cases for start and end of line
            let startMod16 = x1 & 15;  // x % 16
            let endMod16 = x2 & 15; // (x + dx) % 16

            let leftMask = ~(powersOfTwo[startMod16] - 1);
            let rightMask = powersOfTwo[endMod16 + 1] - 1;
            // If start and end are in the same word
            if (startAddress = endAddress) {
                let combMask = leftMask & rightMask;
                if (currColor) {
                    let screen[startAddress] = screen[startAddress] | combMask;
                } else {
                    let screen[startAddress] = screen[startAddress] & ~combMask;
                }
                return;
            }

            if (currColor) {
                let screen[startAddress] = screen[startAddress] | leftMask;
                let screen[endAddress] = screen[endAddress] | rightMask;
            } else {
                let screen[startAddress] = screen[startAddress] & ~leftMask;
                let screen[endAddress] = screen[endAddress] & ~rightMask;
            }

            let startAddress = startAddress + 1;
            while (startAddress < endAddress) {
                let screen[startAddress] = currColor;
                let startAddress = startAddress + 1;
            }
            return;
        }


    	function void drawVertical(int x, int y, int dy) {
            var int i;
            let i = 0;
            while (~(i > dy)) {
                do Screen.drawPixel(x, y + i);
                let i = i + 1;
            }
            return;
    	}

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
         // do Screen.drawRectangle(280,90,410,220);
        function void drawRectangle(int x1, int y1, int x2, int y2) {
            var int dy;
            let dy = Math.abs(y1 - y2);
            while (~(dy < 0))
            {
                do Screen.drawHorizontal(Math.min(x1, x2), Math.max(x1, x2), y1);
                let y1 = y1 + 1;
                let dy = dy - 1;
            }
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            var int dy, halfWidth;
            let dy = -r;
            while (~(dy > 0))
            {
                let halfWidth = Math.sqrt((r * r) - (dy * dy));
                do Screen.drawHorizontal(x - halfWidth, x + halfWidth, y + dy);
                do Screen.drawHorizontal(x - halfWidth, x + halfWidth, y - dy);
                let dy = dy + 1;
            }
            return;
        }
}
