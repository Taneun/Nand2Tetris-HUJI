// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int currLength, thisMaxLength;
    field boolean negativeInt;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0)
        {
            let maxLength = 1;
        }
        let thisMaxLength = maxLength;
        let buffer = Array.new(maxLength);
        let currLength = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do buffer.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (~(j < thisMaxLength))
        {
            return;
        }
        let buffer[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var int i;
        var Array newBuffer;
        if (~(currLength < thisMaxLength))
        {
            return this;
            // todo: extend the buffer?
//            let thisMaxLength = thisMaxLength * 2;
//            let newBuffer = Array.new(thisMaxLength);
//            let i = 0;
//            while (i < currLength)
//            {
//                let newBuffer[i] = buffer[i];
//                let i = i + 1;
//            }
//            do buffer.dispose();
//            let buffer = newBuffer;
        }
        let buffer[currLength] = c;
        let currLength = currLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(currLength > 0))
        {
            return;
        }
        let buffer[currLength] = null;
        let currLength = currLength - 1;
        return;
    }

    method void clear() {
        while (thisMaxLength > 0)
        {
            let buffer[thisMaxLength - 1] = null;
            let thisMaxLength = thisMaxLength - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val, i, d, temp;
        var boolean isNegative;
        let val = 0;
        let i = 0;
        if (buffer[0] = 45)
        {
            let isNegative = true;
            let i = 1;
        }
        while ((i < currLength) & (buffer[i] > 47) & (buffer[i] < 58))
        {
            let d = buffer[i] - 48;
            let val = (val * 10) + d;
            let i = i + 1;
        }
        if (isNegative)
        {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var int c;

        if (val < 0)
        {
            let val = -val;
            let negativeInt = true;
        }
        let lastDigit = val - ((val/10) * 10);
        let c = lastDigit + 48;
        if (val < 10)
        {
            let currLength = 0;
            if (negativeInt)
            {
                do appendChar(45);
            }
            do appendChar(c);
        }
        else
        {
            do setInt(val/10);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
