// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram;
    static int heapBase, heapEnd, nextItem, itemLength, listEnd;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        let heapEnd = 16384;
        let itemLength = heapBase;
        let nextItem = heapBase + 1;
        let listEnd = -1;
        let ram[itemLength] = heapEnd - heapBase;
        let ram[nextItem] = listEnd;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        var int currIdx, nextIdx, returnAddress, segmentStart, blockStart, prevIdx, currSize, toAlloc;
        let prevIdx = 0;
        let currIdx = itemLength;
        let toAlloc = size + 1;
        let returnAddress = -1;

        while (~(currIdx = 0)) {
            // Get the current segment's start, size, and next index
            let segmentStart = currIdx;
            let currSize = ram[segmentStart];
            let nextIdx = ram[segmentStart + 1];
            // If the current segment is large enough, allocate it
            if (currSize > size) {
                let blockStart = segmentStart + currSize - size;
                let ram[blockStart - 1] = toAlloc;
                let returnAddress = blockStart;
                // If the segment is larger than needed, split it
                if (currSize > toAlloc) {
                    let ram[segmentStart] = currSize - size - 1;
                    let ram[segmentStart + 1] = nextIdx;
                } else {
                    // If the segment is exactly the right size, remove it
                    if (prevIdx = 0) {
                        // If the segment is the first in the list
                        let itemLength = nextIdx;
                    } else {
                        // If the segment is not the first in the list
                        let ram[prevIdx + 1] = nextIdx;
                    }
                }
                return returnAddress;
            }
            // Move to the next segment
            let prevIdx = currIdx;
            let currIdx = nextIdx;
        }
        return returnAddress;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        let o[0] = itemLength;
        let itemLength = o - 1;
        return;
    }

    /** Returns the maximal element contained in the given Array/object.
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
            var int size, maxValue, i;

            let size = ram[o - 1];
            let maxValue = o[0];
            let i = 1;

            while (i < size) {
                if (o[i] > maxValue) {
                    let maxValue = o[i];
                }
                let i = i + 1;
            }
            return maxValue;
        }
}


