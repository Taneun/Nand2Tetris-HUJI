function void merge(Array arr, int l, int m, int r)
{
    var int i, j, k, n1, n2;
    var Array L, R;
    let n1 = m - l + 1;
    let n2 = r - m;
    // Create temp arrays
    let L = Array.new(n1);
    let R = Array.new(n2)
    let i = 0;
    let j = 0;
    // Copy data to temp arrays L[] and R[]
    while (i < n1) {
        let L[i] = arr[l + i];
        let i = i + 1;
    }
    while (j < n2) {
        let R[j] = arr[m + 1 + j];
        let j = j + 1;
    }
    // Merge the temp arrays back into arr[l..r
    let i = 0;
    let j = 0;
    let k = l;
    while (i < n1 && j < n2) {
        if (~(L[i] > R[j])) {
            let arr[k] = L[i];
            let i = i + 1;
        }
        else {
            let arr[k] = R[j];
            let j = j + 1;
        }
        let k = k + 1;
    }
    // Copy the remaining elements of L
    while (i < n1) {
        let arr[k] = L[i];
        let i = i + 1;
        let k = k + 1;
    }
    // Copy the remaining elements of R
    while (j < n2) {
        let arr[k] = R[j];
        let j = j + 1;
        let k = k + 1;
    }
    do L.dispose();
    do R.dispose();
    return;
}
// l is for left index and r is right index of the
// sub-array of arr to be sorted
function void mergeSort(Array arr, int l, int r)
{
    var int m;
    if (l < r) {
        let m = l + ((r - l) / 2);
        // sort first and second halves
        do mergeSort(arr, l, m);
        do mergeSort(arr, m + 1, r);

        do merge(arr, l, m, r);
    }
    return;
}
